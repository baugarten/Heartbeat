from django.contrib.auth.models import User
from django.db import models

from artists.models import Artist, Album, Song

NO = 0
YES = 1

class Profile(models.Model):
    user = models.OneToOneField(User, editable=False)
    invites = models.IntegerField()

    def __unicode__(self):
        return unicode(self.user)

class Subscription(models.Model):
    """A subscription a user has to an artist
    The user gets notifications about this artist if their subscribed.
    There will be manual subscriptions (users choose it) and automated ones
    based on their preferences.
    
    """
    profile = models.ForeignKey(Profile)
    artist = models.ForeignKey(Artist)
    AUTO_GENERATED = (
        (NO, 'no'),
        (YES, 'yes'),
        )
    autoGenerated = models.IntegerField(choices=AUTO_GENERATED)

    def __unicode__(self):
        return unicode(profile) + " subscribed to " + unicode(artist)

class Notification(models.Model):
    """A notification for a particular album
    The user has been automatically or manually subscribed to the artist
    and received this notification of a new album or something of the sort.

    """
    profile = models.ForeignKey(Profile)
    album = models.ForeignKey(Album)
    READ_CHOICES = (
        (NO, 'no'),
        (YES, 'yes'),
        )
    read = models.IntegerField(choices=READ_CHOICES)

    def __unicode__(self):
        return unicode(profile) + " notified of " + unicode(album) + ": " + unicode(read)
    def is_unread(self):
        self.read == NO
        

class Download(models.Model):
    """A download
    Users can download songs or albums, one of these will be set,
    the other should not be set. Time is the time of the download.
    
    """
    profile = models.ForeignKey(Profile)
    album = models.ForeignKey(Album)
    song = models.ForeignKey(Song)
    time = models.DateTimeField('date downloaded')

    def __unicode__(self):
        return unicode(self.profile) + " downloaded " \
            + (unicode(self.album) if (self.album) else unicode(self.song)) + " on " + unicode(self.time)
